// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotnetbase.Application.Database;

#nullable disable

namespace dotnetbase.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240111110527_Ordertablesupdates")]
    partial class Ordertablesupdates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("discriminator");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("email_confirmed");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("email_verified_at");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("RememberToken")
                        .HasColumnType("longtext")
                        .HasColumnName("remember_token");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("action");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("changes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("entity_name");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_audit_logs");

                    b.ToTable("audit_logs", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.AuthorizeNet.AuthorizeNetCustomerProfile", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<string>("BankAccountPaymentProfileId")
                        .HasColumnType("longtext")
                        .HasColumnName("bank_account_payment_profile_id");

                    b.Property<string>("CardPaymentProfileId")
                        .HasColumnType("longtext")
                        .HasColumnName("card_payment_profile_id");

                    b.Property<string>("CustomerProfileId")
                        .HasColumnType("longtext")
                        .HasColumnName("customer_profile_id");

                    b.Property<string>("DefaultPaymentProfileId")
                        .HasColumnType("longtext")
                        .HasColumnName("default_payment_profile_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("ShippingAddressId")
                        .HasColumnType("longtext")
                        .HasColumnName("shipping_address_id");

                    b.HasKey("ClientId")
                        .HasName("pk_authorize_net_customer_profiles");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_authorize_net_customer_profiles_email");

                    b.ToTable("authorize_net_customer_profiles", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Charge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_charges");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_charges_category_id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_charges_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_charges_name");

                    b.ToTable("charges", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ChargeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Logo")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_charge_categories");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_charge_categories_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_charge_categories_name");

                    b.ToTable("charge_categories", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_cities_code");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_cities_country_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_cities_name");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("first_name");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id_number");

                    b.Property<int>("IdTypeId")
                        .HasColumnType("int")
                        .HasColumnName("id_type_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<string>("Logo")
                        .HasColumnType("longtext")
                        .HasColumnName("logo");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<int>("RegStatusId")
                        .HasColumnType("int")
                        .HasColumnName("reg_status_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.HasIndex("RegStatusId")
                        .HasDatabaseName("ix_clients_reg_status_id");

                    b.HasIndex("IdTypeId", "IdNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_clients_id_type_id_id_number");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ClientAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine")
                        .HasColumnType("longtext")
                        .HasColumnName("address_line");

                    b.Property<string>("City")
                        .HasColumnType("longtext")
                        .HasColumnName("city");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<string>("CountryRegion")
                        .HasColumnType("longtext")
                        .HasColumnName("country_region");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext")
                        .HasColumnName("postal_code");

                    b.Property<string>("StateProvince")
                        .HasColumnType("longtext")
                        .HasColumnName("state_province");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_client_address");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_address_client_id");

                    b.ToTable("client_address", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ClientGeoLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Accuracy")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("accuracy");

                    b.Property<decimal?>("Altitude")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("altitude");

                    b.Property<decimal?>("AltitudeAccuracy")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("altitude_accuracy");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("Heading")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("heading");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("longitude");

                    b.Property<decimal?>("Speed")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("speed");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_client_geo_locations");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_geo_locations_client_id");

                    b.ToTable("client_geo_locations", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ClientSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("CurrentSubscriptionDetailId")
                        .HasColumnType("int")
                        .HasColumnName("current_subscription_detail_id");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiry_date");

                    b.Property<DateTime>("FirstSubscriptionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("first_subscription_date");

                    b.Property<DateTime>("LastRenewedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_renewed_date");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("status");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_client_subscriptions");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_subscriptions_client_id");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("ix_client_subscriptions_subscription_id");

                    b.ToTable("client_subscriptions", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ClientSubscriptionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("amount_paid");

                    b.Property<int>("ClientSubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("client_subscription_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateSubscibed")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_subscibed");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("discount");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiry_date");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<int?>("SubscriptionPlanPriceId")
                        .HasColumnType("int")
                        .HasColumnName("subscription_plan_price_id");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_amount");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_client_subscription_details");

                    b.HasIndex("ClientSubscriptionId")
                        .HasDatabaseName("ix_client_subscription_details_client_subscription_id");

                    b.HasIndex("SubscriptionPlanPriceId")
                        .HasDatabaseName("ix_client_subscription_details_subscription_plan_price_id");

                    b.ToTable("client_subscription_details", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ClientSubscriptionDetailPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ClientSubscriptionDetailId")
                        .HasColumnType("int")
                        .HasColumnName("client_subscription_detail_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_client_subscription_detail_payments");

                    b.HasIndex("ClientSubscriptionDetailId")
                        .HasDatabaseName("ix_client_subscription_detail_payments_client_subscription_deta");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_client_subscription_detail_payments_payment_id");

                    b.ToTable("client_subscription_detail_payments", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<bool>("Read")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("read");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("read_at");

                    b.Property<string>("ReadBy")
                        .HasColumnType("longtext")
                        .HasColumnName("read_by");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_contact_us");

                    b.ToTable("contact_us", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_countries_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_countries_name");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<string>("Symbol")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("symbol");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_currencies_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_currencies_name");

                    b.ToTable("currencies", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Detergent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("longtext")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_detergents");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_detergents_name");

                    b.ToTable("detergents", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.IdType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_id_types");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_id_types_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_id_types_name");

                    b.ToTable("id_types", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Logo")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_item_types");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_item_types_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_item_types_name");

                    b.ToTable("item_types", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.LaundryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("int")
                        .HasColumnName("item_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_laundry_items");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_laundry_items_code");

                    b.HasIndex("ItemTypeId")
                        .HasDatabaseName("ix_laundry_items_item_type_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_laundry_items_name");

                    b.ToTable("laundry_items", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Attachments")
                        .HasColumnType("longtext")
                        .HasColumnName("attachments");

                    b.Property<string>("BBC")
                        .HasColumnType("longtext")
                        .HasColumnName("bbc");

                    b.Property<string>("CC")
                        .HasColumnType("longtext")
                        .HasColumnName("cc");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message");

                    b.Property<string>("NotificationStatus")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("notification_status");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("notification_type");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("receiver");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("sender");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("sent_date");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("subject");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OperatingCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_operating_cities");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_operating_cities_city_id");

                    b.ToTable("operating_cities", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ClientUserName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("client_user_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("delivery_date");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("discount");

                    b.Property<decimal>("GrossAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("gross_amount");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("net_amount");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("order_date");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int")
                        .HasColumnName("order_status_id");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("pickup_date");

                    b.Property<string>("RefNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ref_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("OrderStatusId")
                        .HasDatabaseName("ix_orders_order_status_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AssingedUserName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("assinged_user_name");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext")
                        .HasColumnName("comments");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_assigned");

                    b.Property<string>("OrderAssignmentType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("order_assignment_type");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_order_assignments");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_assignments_order_id");

                    b.ToTable("order_assignments", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("amount");

                    b.Property<string>("ChargeDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("charge_description");

                    b.Property<int>("ChargeId")
                        .HasColumnType("int")
                        .HasColumnName("charge_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_order_charges");

                    b.HasIndex("ChargeId")
                        .HasDatabaseName("ix_order_charges_charge_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_charges_order_id");

                    b.ToTable("order_charges", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderDetergent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext")
                        .HasColumnName("comments");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("DetergentId")
                        .HasColumnType("int")
                        .HasColumnName("detergent_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("quantity");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_order_detergents");

                    b.HasIndex("DetergentId")
                        .HasDatabaseName("ix_order_detergents_detergent_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_detergents_order_id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_order_detergents_service_id");

                    b.ToTable("order_detergents", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext")
                        .HasColumnName("comments");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("discount");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<int>("LaundryItemId")
                        .HasColumnType("int")
                        .HasColumnName("laundry_item_id");

                    b.Property<decimal>("NetPrice")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("net_price");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("quantity");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("unit_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_order_items");

                    b.HasIndex("LaundryItemId")
                        .HasDatabaseName("ix_order_items_laundry_item_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_order_items_service_id");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Accuracy")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("accuracy");

                    b.Property<string>("AddressLine")
                        .HasColumnType("longtext")
                        .HasColumnName("address_line");

                    b.Property<string>("City")
                        .HasColumnType("longtext")
                        .HasColumnName("city");

                    b.Property<string>("CountryRegion")
                        .HasColumnType("longtext")
                        .HasColumnName("country_region");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("longitude");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext")
                        .HasColumnName("postal_code");

                    b.Property<string>("StateProvince")
                        .HasColumnType("longtext")
                        .HasColumnName("state_province");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_order_locations");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_locations_order_id");

                    b.ToTable("order_locations", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message");

                    b.Property<string>("MessageFrom")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message_from");

                    b.Property<string>("MessageStatus")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message_status");

                    b.Property<string>("MessageTo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("message_to");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_order_messages");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_messages_order_id");

                    b.ToTable("order_messages", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_order_payments");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_payments_order_id");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_order_payments_payment_id");

                    b.ToTable("order_payments", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderPromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .HasColumnType("longtext")
                        .HasColumnName("comments");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("PromoId")
                        .HasColumnType("int")
                        .HasColumnName("promo_id");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_amount");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_order_promo_codes");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_promo_codes_order_id");

                    b.HasIndex("PromoId")
                        .HasDatabaseName("ix_order_promo_codes_promo_id");

                    b.ToTable("order_promo_codes", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Message")
                        .HasColumnType("longtext")
                        .HasColumnName("message");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<string>("RatedEmail")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("rated_email");

                    b.Property<string>("RaterEmail")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("rater_email");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_order_ratings");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_ratings_order_id");

                    b.ToTable("order_ratings", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.Property<int>("Rank")
                        .HasColumnType("int")
                        .HasColumnName("rank");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_order_status");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_order_status_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_order_status_name");

                    b.ToTable("order_status", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderStatusUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("status_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_order_status_updates");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_status_updates_order_id");

                    b.ToTable("order_status_updates", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("company_name");

                    b.Property<string>("ContactFirstName")
                        .HasColumnType("longtext")
                        .HasColumnName("contact_first_name");

                    b.Property<string>("ContactLastName")
                        .HasColumnType("longtext")
                        .HasColumnName("contact_last_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id_number");

                    b.Property<int>("IdTypeId")
                        .HasColumnType("int")
                        .HasColumnName("id_type_id");

                    b.Property<string>("Logo")
                        .HasColumnType("longtext")
                        .HasColumnName("logo");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<int>("RegStatusId")
                        .HasColumnType("int")
                        .HasColumnName("reg_status_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_partners");

                    b.HasIndex("RegStatusId")
                        .HasDatabaseName("ix_partners_reg_status_id");

                    b.HasIndex("IdTypeId", "IdNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_partners_id_type_id_id_number");

                    b.ToTable("partners", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.PartnerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine")
                        .HasColumnType("longtext")
                        .HasColumnName("address_line");

                    b.Property<string>("City")
                        .HasColumnType("longtext")
                        .HasColumnName("city");

                    b.Property<string>("CountryRegion")
                        .HasColumnType("longtext")
                        .HasColumnName("country_region");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int")
                        .HasColumnName("partner_id");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext")
                        .HasColumnName("postal_code");

                    b.Property<string>("StateProvince")
                        .HasColumnType("longtext")
                        .HasColumnName("state_province");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_partner_addresses");

                    b.HasIndex("PartnerId")
                        .HasDatabaseName("ix_partner_addresses_partner_id");

                    b.ToTable("partner_addresses", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.PartnerGeoLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Accuracy")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("accuracy");

                    b.Property<decimal?>("Altitude")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("altitude");

                    b.Property<decimal?>("AltitudeAccuracy")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("altitude_accuracy");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("Heading")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("heading");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("longitude");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int")
                        .HasColumnName("partner_id");

                    b.Property<decimal?>("Speed")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("speed");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_partner_geo_locations");

                    b.HasIndex("PartnerId")
                        .HasDatabaseName("ix_partner_geo_locations_partner_id");

                    b.ToTable("partner_geo_locations", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("currency_id");

                    b.Property<string>("Descripion")
                        .HasColumnType("longtext")
                        .HasColumnName("descripion");

                    b.Property<string>("ExTransactionId")
                        .HasColumnType("longtext")
                        .HasColumnName("ex_transaction_id");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("payment_amount");

                    b.Property<DateTime>("PaymentEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("payment_end");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("payment_method");

                    b.Property<DateTime>("PaymentStart")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("payment_start");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("payment_status");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("payment_type");

                    b.Property<string>("RefNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ref_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_payments_currency_id");

                    b.HasIndex("RefNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_payments_ref_number");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Period", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.Property<int>("NoOfDays")
                        .HasColumnType("int")
                        .HasColumnName("no_of_days");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_periods");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_periods_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_periods_name");

                    b.ToTable("periods", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int")
                        .HasColumnName("period_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<int>("UnitTypeId")
                        .HasColumnType("int")
                        .HasColumnName("unit_type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_prices");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_prices_item_id");

                    b.HasIndex("PeriodId")
                        .HasDatabaseName("ix_prices_period_id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_prices_service_id");

                    b.HasIndex("UnitTypeId")
                        .HasDatabaseName("ix_prices_unit_type_id");

                    b.ToTable("prices", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("code_name");

                    b.Property<string>("CodeValue")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code_value");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("discount");

                    b.Property<decimal>("MaxOrderValue")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("max_order_value");

                    b.Property<decimal>("MinOrderValue")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("min_order_value");

                    b.Property<DateTime>("PromoEndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("promo_end_date");

                    b.Property<DateTime>("PromoStartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("promo_start_date");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int")
                        .HasColumnName("usage_count");

                    b.Property<int>("UsageLimit")
                        .HasColumnType("int")
                        .HasColumnName("usage_limit");

                    b.HasKey("Id")
                        .HasName("pk_promo_codes");

                    b.HasIndex("CodeValue")
                        .HasDatabaseName("ix_promo_codes_code_value");

                    b.ToTable("promo_codes", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.RegStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_reg_statuses");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_reg_statuses_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_reg_statuses_name");

                    b.ToTable("reg_statuses", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_services");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_services_category_id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_services_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_services_name");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_services_type_id");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Logo")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_service_categories");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_service_categories_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_service_categories_name");

                    b.ToTable("service_categories", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ServiceCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ChargeId")
                        .HasColumnType("int")
                        .HasColumnName("charge_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_service_charges");

                    b.HasIndex("ChargeId")
                        .HasDatabaseName("ix_service_charges_charge_id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_service_charges_service_id");

                    b.ToTable("service_charges", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ServiceDetergent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("DetergentId")
                        .HasColumnType("int")
                        .HasColumnName("detergent_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_service_detergents");

                    b.HasIndex("DetergentId")
                        .HasDatabaseName("ix_service_detergents_detergent_id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_service_detergents_service_id");

                    b.ToTable("service_detergents", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ServicePeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int")
                        .HasColumnName("period_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_service_periods");

                    b.HasIndex("PeriodId")
                        .HasDatabaseName("ix_service_periods_period_id");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_service_periods_service_id");

                    b.ToTable("service_periods", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ServiceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("first_name");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id_number");

                    b.Property<int>("IdTypeId")
                        .HasColumnType("int")
                        .HasColumnName("id_type_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<string>("Logo")
                        .HasColumnType("longtext")
                        .HasColumnName("logo");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<int>("RegStatusId")
                        .HasColumnType("int")
                        .HasColumnName("reg_status_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_service_providers");

                    b.HasIndex("RegStatusId")
                        .HasDatabaseName("ix_service_providers_reg_status_id");

                    b.HasIndex("IdTypeId", "IdNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_service_providers_id_type_id_id_number");

                    b.ToTable("service_providers", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ServiceProviderAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine")
                        .HasColumnType("longtext")
                        .HasColumnName("address_line");

                    b.Property<string>("City")
                        .HasColumnType("longtext")
                        .HasColumnName("city");

                    b.Property<string>("CountryRegion")
                        .HasColumnType("longtext")
                        .HasColumnName("country_region");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext")
                        .HasColumnName("postal_code");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int")
                        .HasColumnName("service_provider_id");

                    b.Property<string>("StateProvince")
                        .HasColumnType("longtext")
                        .HasColumnName("state_province");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_service_provider_addresses");

                    b.HasIndex("ServiceProviderId")
                        .HasDatabaseName("ix_service_provider_addresses_service_provider_id");

                    b.ToTable("service_provider_addresses", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ServiceProviderGeoLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Accuracy")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("accuracy");

                    b.Property<decimal?>("Altitude")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("altitude");

                    b.Property<decimal?>("AltitudeAccuracy")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("altitude_accuracy");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("Heading")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("heading");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("longitude");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int")
                        .HasColumnName("service_provider_id");

                    b.Property<decimal?>("Speed")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("speed");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_service_provider_geo_locations");

                    b.HasIndex("ServiceProviderId")
                        .HasDatabaseName("ix_service_provider_geo_locations_service_provider_id");

                    b.ToTable("service_provider_geo_locations", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<bool>("Itemized")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("itemized");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_service_types");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_service_types_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_service_types_name");

                    b.ToTable("service_types", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("MinOrder")
                        .HasColumnType("int")
                        .HasColumnName("min_order");

                    b.Property<decimal?>("MinOrderPenalty")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("min_order_penalty");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("OrderFrequency")
                        .HasColumnType("int")
                        .HasColumnName("order_frequency");

                    b.Property<int>("OrderPeriodId")
                        .HasColumnType("int")
                        .HasColumnName("order_period_id");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("status");

                    b.Property<string>("TermAndConditions")
                        .HasColumnType("longtext")
                        .HasColumnName("term_and_conditions");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_subscription_plans");

                    b.HasIndex("OrderPeriodId")
                        .HasDatabaseName("ix_subscription_plans_order_period_id");

                    b.ToTable("subscription_plans", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.SubscriptionPlanCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("amount");

                    b.Property<int>("ChargeId")
                        .HasColumnType("int")
                        .HasColumnName("charge_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_subscription_plan_charges");

                    b.HasIndex("ChargeId")
                        .HasDatabaseName("ix_subscription_plan_charges_charge_id");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("ix_subscription_plan_charges_subscription_id");

                    b.ToTable("subscription_plan_charges", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.SubscriptionPlanPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("currency_id");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("PeriodId")
                        .HasColumnType("int")
                        .HasColumnName("period_id");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_subscription_plan_prices");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_subscription_plan_prices_currency_id");

                    b.HasIndex("PeriodId")
                        .HasDatabaseName("ix_subscription_plan_prices_period_id");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("ix_subscription_plan_prices_subscription_id");

                    b.ToTable("subscription_plan_prices", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.SubscriptionPlanService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("subscription_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_subscription_plan_services");

                    b.HasIndex("ServiceId")
                        .HasDatabaseName("ix_subscription_plan_services_service_id");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("ix_subscription_plan_services_subscription_id");

                    b.ToTable("subscription_plan_services", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.UnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_unit_types");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_unit_types_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_unit_types_name");

                    b.ToTable("unit_types", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("EmailVerifiedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("email_verified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("RememberToken")
                        .HasColumnType("longtext")
                        .HasColumnName("remember_token");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.UserDeviceToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("device_token");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_user_device_tokens");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_device_tokens_email");

                    b.ToTable("user_device_tokens", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_id");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int")
                        .HasColumnName("user_id1");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.HasIndex("UserId1")
                        .HasDatabaseName("ix_user_roles_user_id1");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.UserVerificationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_code");

                    b.Property<DateTime>("PhoneCodeExpiry")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("phone_code_expiry");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_user_verification_codes");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_verification_codes_email");

                    b.ToTable("user_verification_codes", (string)null);
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_asp_net_roles_name");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "775577ca-fab5-434e-9e11-3a3294ff7fa1",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "0ff8d256-77b7-4326-9d7e-c0e1eccbd688",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("dotnetbase.Application.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Charge", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.ChargeCategory", "ChargeCategory")
                        .WithMany("Charges")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_charges_charge_categories_charge_category_id");

                    b.Navigation("ChargeCategory");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.City", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cities_countries_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Client", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.IdType", "IdType")
                        .WithMany("Clients")
                        .HasForeignKey("IdTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clients_id_types_id_type_id");

                    b.HasOne("dotnetbase.Application.Models.RegStatus", "RegStatus")
                        .WithMany("Clients")
                        .HasForeignKey("RegStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clients_reg_statuses_reg_status_id");

                    b.Navigation("IdType");

                    b.Navigation("RegStatus");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ClientAddress", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Client", "Client")
                        .WithMany("ClientAddresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_address_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ClientGeoLocation", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Client", "Client")
                        .WithMany("ClientGeoLocations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_geo_locations_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ClientSubscription", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Client", "Client")
                        .WithMany("ClientSubscriptions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_subscriptions_clients_client_id");

                    b.HasOne("dotnetbase.Application.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("ClientSubscriptions")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_subscriptions_subscription_plans_subscription_plan_id");

                    b.Navigation("Client");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ClientSubscriptionDetail", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.ClientSubscription", "ClientSubscription")
                        .WithMany("ClientSubscriptionDetails")
                        .HasForeignKey("ClientSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_subscription_details_client_subscriptions_client_subs");

                    b.HasOne("dotnetbase.Application.Models.SubscriptionPlanPrice", "SubscriptionPlanPrice")
                        .WithMany("ClientSubscriptionDetails")
                        .HasForeignKey("SubscriptionPlanPriceId")
                        .HasConstraintName("fk_client_subscription_details_subscription_plan_prices_subscri");

                    b.Navigation("ClientSubscription");

                    b.Navigation("SubscriptionPlanPrice");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ClientSubscriptionDetailPayment", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.ClientSubscriptionDetail", "ClientSubscriptionDetail")
                        .WithMany("ClientSubscriptionDetailPayments")
                        .HasForeignKey("ClientSubscriptionDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_subscription_detail_payments_client_subscription_deta");

                    b.HasOne("dotnetbase.Application.Models.Payment", "Payment")
                        .WithMany("ClientSubscriptionDetailPayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_subscription_detail_payments_payments_payment_id");

                    b.Navigation("ClientSubscriptionDetail");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.LaundryItem", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.ItemType", "ItemType")
                        .WithMany("Items")
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_laundry_items_item_types_item_type_id");

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OperatingCity", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.City", "City")
                        .WithMany("OperatingCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_operating_cities_cities_city_id");

                    b.Navigation("City");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Order", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_order_status_order_status_id");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderAssignment", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Order", "Order")
                        .WithMany("OrderAssigments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_assignments_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderCharge", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Charge", "Charge")
                        .WithMany("OrderCharges")
                        .HasForeignKey("ChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_charges_charges_charge_id");

                    b.HasOne("dotnetbase.Application.Models.Order", "Order")
                        .WithMany("OrderCharges")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_charges_orders_order_id");

                    b.Navigation("Charge");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderDetergent", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Detergent", "Detergent")
                        .WithMany("OrderDetergents")
                        .HasForeignKey("DetergentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_detergents_detergents_detergent_id");

                    b.HasOne("dotnetbase.Application.Models.Order", "Order")
                        .WithMany("OrderDetergents")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_detergents_orders_order_id");

                    b.HasOne("dotnetbase.Application.Models.Service", "Service")
                        .WithMany("OrderDetergents")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_detergents_services_service_id");

                    b.Navigation("Detergent");

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderItem", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.LaundryItem", "LaundryItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("LaundryItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_laundry_items_laundry_item_id");

                    b.HasOne("dotnetbase.Application.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.HasOne("dotnetbase.Application.Models.Service", "Service")
                        .WithMany("OrderItems")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_services_service_id");

                    b.Navigation("LaundryItem");

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderLocation", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Order", "Order")
                        .WithMany("OrderLocations")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_locations_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderMessage", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Order", "Order")
                        .WithMany("OrderMessages")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_messages_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderPayment", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Order", "Order")
                        .WithMany("OrderPayments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_payments_orders_order_id");

                    b.HasOne("dotnetbase.Application.Models.Payment", "Payment")
                        .WithMany("OrderPayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_payments_payments_payment_id");

                    b.Navigation("Order");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderPromoCode", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Order", "Order")
                        .WithMany("OrderPromoCodes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_promo_codes_orders_order_id");

                    b.HasOne("dotnetbase.Application.Models.PromoCode", "PromoCode")
                        .WithMany("OrderPromoCodes")
                        .HasForeignKey("PromoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_promo_codes_promo_codes_promo_code_id");

                    b.Navigation("Order");

                    b.Navigation("PromoCode");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderRating", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Order", "Order")
                        .WithMany("OrderRatings")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_ratings_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderStatusUpdate", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Order", "Order")
                        .WithMany("OrderStatusUpdates")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_status_updates_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Partner", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.IdType", "IdType")
                        .WithMany("Partners")
                        .HasForeignKey("IdTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_partners_id_types_id_type_id");

                    b.HasOne("dotnetbase.Application.Models.RegStatus", "RegStatus")
                        .WithMany("Partners")
                        .HasForeignKey("RegStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_partners_reg_statuses_reg_status_id");

                    b.Navigation("IdType");

                    b.Navigation("RegStatus");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.PartnerAddress", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Partner", "Partner")
                        .WithMany("PartnerAddresses")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_partner_addresses_partners_partner_id");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.PartnerGeoLocation", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Partner", "Partner")
                        .WithMany("PartnerGeoLocations")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_partner_geo_locations_partners_partner_id");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Payment", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Currency", "Currency")
                        .WithMany("Payments")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_currencies_currency_id");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Price", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.LaundryItem", "Item")
                        .WithMany("Prices")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prices_laundry_items_item_id");

                    b.HasOne("dotnetbase.Application.Models.Period", "Period")
                        .WithMany("Prices")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prices_periods_period_id");

                    b.HasOne("dotnetbase.Application.Models.Service", "Service")
                        .WithMany("Prices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prices_services_service_id");

                    b.HasOne("dotnetbase.Application.Models.UnitType", "UnitType")
                        .WithMany("Prices")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prices_unit_types_unit_type_id");

                    b.Navigation("Item");

                    b.Navigation("Period");

                    b.Navigation("Service");

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Service", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.ServiceCategory", "ServiceCategory")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_services_service_categories_service_category_id");

                    b.HasOne("dotnetbase.Application.Models.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_services_service_types_service_type_id");

                    b.Navigation("ServiceCategory");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ServiceCharge", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Charge", "Charge")
                        .WithMany("ServiceCharges")
                        .HasForeignKey("ChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_service_charges_charges_charge_id");

                    b.HasOne("dotnetbase.Application.Models.Service", "Service")
                        .WithMany("ServiceCharges")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_service_charges_services_service_id");

                    b.Navigation("Charge");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ServiceDetergent", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Detergent", "Detergent")
                        .WithMany("ServiceDetergents")
                        .HasForeignKey("DetergentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_service_detergents_detergents_detergent_id");

                    b.HasOne("dotnetbase.Application.Models.Service", "Service")
                        .WithMany("ServiceDetergents")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_service_detergents_services_service_id");

                    b.Navigation("Detergent");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ServicePeriod", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Period", "Period")
                        .WithMany("ServicePeriods")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_service_periods_periods_period_id");

                    b.HasOne("dotnetbase.Application.Models.Service", "Service")
                        .WithMany("ServicePeriods")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_service_periods_services_service_id");

                    b.Navigation("Period");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ServiceProvider", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.IdType", "IdType")
                        .WithMany("ServiceProviders")
                        .HasForeignKey("IdTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_service_providers_id_types_id_type_id");

                    b.HasOne("dotnetbase.Application.Models.RegStatus", "RegStatus")
                        .WithMany("ServiceProviders")
                        .HasForeignKey("RegStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_service_providers_reg_statuses_reg_status_id");

                    b.Navigation("IdType");

                    b.Navigation("RegStatus");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ServiceProviderAddress", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.ServiceProvider", "ServiceProvider")
                        .WithMany("ServiceProviderAddresses")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_service_provider_addresses_service_providers_service_provide");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ServiceProviderGeoLocation", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.ServiceProvider", "ServiceProvider")
                        .WithMany("ServiceProviderGeoLocations")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_service_provider_geo_locations_service_providers_service_pro");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.SubscriptionPlan", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Period", "Period")
                        .WithMany("SubscriptionPlans")
                        .HasForeignKey("OrderPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_plans_periods_period_id");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.SubscriptionPlanCharge", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Charge", "Charge")
                        .WithMany("SubscriptionPlanCharges")
                        .HasForeignKey("ChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_plan_charges_charges_charge_id");

                    b.HasOne("dotnetbase.Application.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("SubscriptionPlanCharges")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_plan_charges_subscription_plans_subscription_pla");

                    b.Navigation("Charge");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.SubscriptionPlanPrice", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Currency", "Currency")
                        .WithMany("SubscriptionPlanPrices")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_plan_prices_currencies_currency_id");

                    b.HasOne("dotnetbase.Application.Models.Period", "Period")
                        .WithMany("SubscriptionPlanPrices")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_plan_prices_periods_period_id");

                    b.HasOne("dotnetbase.Application.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("SubscriptionPlanPrices")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_plan_prices_subscription_plans_subscription_plan");

                    b.Navigation("Currency");

                    b.Navigation("Period");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.SubscriptionPlanService", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Service", "Service")
                        .WithMany("SubscriptionPlanServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_plan_services_services_service_id");

                    b.HasOne("dotnetbase.Application.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("SubscriptionPlanServices")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_plan_services_subscription_plans_subscription_pl");

                    b.Navigation("Service");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.UserRole", b =>
                {
                    b.HasOne("dotnetbase.Application.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("dotnetbase.Application.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_application_user_user_id");

                    b.HasOne("dotnetbase.Application.Models.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1")
                        .HasConstraintName("fk_user_roles_user_user_id1");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Charge", b =>
                {
                    b.Navigation("OrderCharges");

                    b.Navigation("ServiceCharges");

                    b.Navigation("SubscriptionPlanCharges");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ChargeCategory", b =>
                {
                    b.Navigation("Charges");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.City", b =>
                {
                    b.Navigation("OperatingCities");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Client", b =>
                {
                    b.Navigation("ClientAddresses");

                    b.Navigation("ClientGeoLocations");

                    b.Navigation("ClientSubscriptions");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ClientSubscription", b =>
                {
                    b.Navigation("ClientSubscriptionDetails");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ClientSubscriptionDetail", b =>
                {
                    b.Navigation("ClientSubscriptionDetailPayments");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Currency", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("SubscriptionPlanPrices");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Detergent", b =>
                {
                    b.Navigation("OrderDetergents");

                    b.Navigation("ServiceDetergents");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.IdType", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Partners");

                    b.Navigation("ServiceProviders");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ItemType", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.LaundryItem", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Order", b =>
                {
                    b.Navigation("OrderAssigments");

                    b.Navigation("OrderCharges");

                    b.Navigation("OrderDetergents");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderLocations");

                    b.Navigation("OrderMessages");

                    b.Navigation("OrderPayments");

                    b.Navigation("OrderPromoCodes");

                    b.Navigation("OrderRatings");

                    b.Navigation("OrderStatusUpdates");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Partner", b =>
                {
                    b.Navigation("PartnerAddresses");

                    b.Navigation("PartnerGeoLocations");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Payment", b =>
                {
                    b.Navigation("ClientSubscriptionDetailPayments");

                    b.Navigation("OrderPayments");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Period", b =>
                {
                    b.Navigation("Prices");

                    b.Navigation("ServicePeriods");

                    b.Navigation("SubscriptionPlanPrices");

                    b.Navigation("SubscriptionPlans");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.PromoCode", b =>
                {
                    b.Navigation("OrderPromoCodes");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.RegStatus", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Partners");

                    b.Navigation("ServiceProviders");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Service", b =>
                {
                    b.Navigation("OrderDetergents");

                    b.Navigation("OrderItems");

                    b.Navigation("Prices");

                    b.Navigation("ServiceCharges");

                    b.Navigation("ServiceDetergents");

                    b.Navigation("ServicePeriods");

                    b.Navigation("SubscriptionPlanServices");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ServiceCategory", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ServiceProvider", b =>
                {
                    b.Navigation("ServiceProviderAddresses");

                    b.Navigation("ServiceProviderGeoLocations");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.ServiceType", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.SubscriptionPlan", b =>
                {
                    b.Navigation("ClientSubscriptions");

                    b.Navigation("SubscriptionPlanCharges");

                    b.Navigation("SubscriptionPlanPrices");

                    b.Navigation("SubscriptionPlanServices");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.SubscriptionPlanPrice", b =>
                {
                    b.Navigation("ClientSubscriptionDetails");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.UnitType", b =>
                {
                    b.Navigation("Prices");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("dotnetbase.Application.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
